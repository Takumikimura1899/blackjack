let patern = [
  ["自分のカードの合計", "相手のカードの合計", "勝敗"],
  ["21を超えている", "21を超えていない", "相手の勝ち"],
  ["21を超えていない", "21を超えている", "自分の勝ち"],
  ["21を超えている", "21を超えている", "引き分け"],
  ["21を超えていない", "21を超えていない", "大きい方が勝ち　同じなら負け"],
];
console.table(patern);
// **********************
// グローバル関数
// **********************

// カードの山 (配列)
// 自分のカード (配列)
// 相手のカード　(配列)
// 勝敗決定フラグ　(論理型)

// **********************
// イベントハンドラの割り当て
// **********************

// ページの読み込みが完了したとき実行する関数を登録
window.addEventListener("load", 初期表示);
// 「カードを引く」ボタンを押した時実行する関数を登録
document.querySelector("#ボタンのID").addEventListener("click", カードを引く);
// 「勝負する！」ボタンを押した時に実行する関数を登録
document.querySelector("#ボタンのID").addEventListener("click", 勝負する);
// 「もう一回遊ぶ」ボタンを押した時に実行する関数を登録
document.querySelector("#ボタンのID").addEventListener("click", もう一回遊ぶ);

// **********************
// イベントハンドラ
// **********************

// ページの読み込みが完了したときに実行する関数
function 初期表示() {
  //     シャッフル
  //     自分がカードを引く
  //     相手がカードを引く
  //     画面を更新する
}

// カードの山をシャッフルする関数
function シャッフル() {}

// 「カードを引く」ボタンを押した時に実行する関数
function カードを引く() {
  if (勝敗が未決定) {
    //     自分がカードを引く
    //     相手がカードを引く
    //     画面を更新する
  }
}

// 「勝負する」ボタンを押した時実行する関数
function 勝負する() {
  if (勝敗が未決定) {
    //     勝敗を判定する
    //     勝敗を画面に表示する
    // 勝敗決定フラグを「決定に変更」
  }
}

// 「もう一回遊ぶ」ボタンを押した時実行する関数
function もう一回遊ぶ() {
  //     画面を初期表示に戻す
  // reloadメソッドでページを再読み込みする
}

自分がカードを引く関数;
function 自分がカードを引く() {
  if (自分のカードの枚数が４枚以下) {
    if (考える) {
      // カードの山(配列)から一枚取り出す
      // 取り出した一枚を自分のカード(配列)に追加する
    }
  }
}

// カードを引くかどうか考える関数
function 考える() {
  // 引くか引かないかを戻り値で返す
}

// 画面を更新する関数
function 画面を更新する() {
  // 自分のカードを表示する
  for (iを５回繰り返す; ; ) {
    if (自分のカードの枚数がiより大きい) {
      //   表面の画像を表示する
    } else {
      //   裏面の画像を表示する
    }
  }
  // 相手のカードを表示する
  // カードの合計を再計算する
}

// 勝敗を判定する関数
function 勝敗を判定する() {
  // 自分のカードの合計を求める
  // 相手のカードの合計を求める
  // 勝敗のパターン表に当てはめて勝敗を決める
  // 勝敗を呼び出し元に返す
}

function debug() {
  console.log("カードの山", カードの山);
  console.log("自分のカード", 自分のカード);
  console.log("相手のカード", 相手のカード);
  console.log("勝敗決定フラグ", 勝敗決定フラグ);
}
